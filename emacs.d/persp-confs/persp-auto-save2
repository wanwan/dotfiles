;; -*- mode: emacs-lisp; eval: (progn (pp-buffer) (indent-buffer)) -*-
((def-persp nil ((def-buffer "init.el" "/home/waka/dotfiles/emacs.d/init.el" emacs-lisp-mode) (def-buffer "make_effector.sh<filters>" "/home/waka/workspace/hgrm/master/hagoromo/services/soundpostcontrolservice/src/pipeline/filters/tools/make_effector.sh" sh-mode) (def-buffer "F2i.cc<filters>" "/home/waka/workspace/hgrm/master/hagoromo/services/soundpostcontrolservice/src/pipeline/filters/F2i/F2i.cc" c++-mode) (def-buffer "F2i.diff" "/home/waka/workspace/hgrm/master/hagoromo/services/F2i.diff" diff-mode) (def-buffer "make_effector.sh<stationary>" "/home/waka/workspace/hgrm/master/hagoromo/services/soundservice/src/filters/stationary/tools/make_effector.sh" sh-mode) (def-buffer "howm-20171225.652<.emacs.d>" "~/.emacs.d/elpa/howm-20171225.652/" dired-mode) (def-buffer "elpa<.emacs.d>" "~/.emacs.d/elpa/" dired-mode) (def-buffer ".emacs.d" "~/.emacs.d/" dired-mode) (def-buffer "elisp" "~/.emacs.d/elisp/" dired-mode) (def-buffer "howm-20171225.652<emacs.d>" "~/dotfiles/emacs.d/elpa/howm-20171225.652/" dired-mode) (def-buffer "elpa<emacs.d>" "~/dotfiles/emacs.d/elpa/" dired-mode) (def-buffer "emacs.d" "~/dotfiles/emacs.d/" dired-mode) (def-buffer "F2i" "~/workspace/hgrm/master/hagoromo/services/soundpostcontrolservice/src/pipeline/filters/F2i/" dired-mode) (def-buffer "filters<pipeline>" "~/workspace/hgrm/master/hagoromo/services/soundpostcontrolservice/src/pipeline/filters/" dired-mode) (def-buffer "pipeline" "~/workspace/hgrm/master/hagoromo/services/soundpostcontrolservice/src/pipeline/" dired-mode) (def-buffer "F2i.h.diff" "/home/waka/workspace/hgrm/master/hagoromo/services/F2i.h.diff" diff-mode) (def-buffer "stationary" "~/workspace/hgrm/master/hagoromo/services/soundservice/src/filters/stationary/" dired-mode) (def-buffer "include<stationary>" "~/workspace/hgrm/master/hagoromo/services/soundservice/src/filters/stationary/include/" dired-mode) (def-buffer "filters<src>" "~/workspace/hgrm/master/hagoromo/services/soundservice/src/filters/" dired-mode) (def-buffer "src<soundservice>" "~/workspace/hgrm/master/hagoromo/services/soundservice/src/" dired-mode) (def-buffer "include<src>" "~/workspace/hgrm/master/hagoromo/services/soundservice/src/include/" dired-mode) (def-buffer "include<filters>" "~/workspace/hgrm/master/hagoromo/services/soundpostcontrolservice/src/pipeline/filters/include/" dired-mode) (def-buffer "F2i.h<filters>" "/home/waka/workspace/hgrm/master/hagoromo/services/soundpostcontrolservice/src/pipeline/filters/include/F2i.h" c++-mode) (def-buffer "F2i.h<stationary>" "/home/waka/workspace/hgrm/master/hagoromo/services/soundservice/src/filters/stationary/include/F2i.h" c++-mode) (def-buffer "ChCombiner.h" "/home/waka/workspace/hgrm/master/hagoromo/services/soundservice/src/filters/stationary/include/ChCombiner.h" c-mode) (def-buffer "AutoWah.h" "/home/waka/workspace/hgrm/master/hagoromo/services/soundservice/src/filters/stationary/include/AutoWah.h" c-mode) (def-buffer "AavMaxMc.h" "/home/waka/workspace/hgrm/master/hagoromo/services/soundservice/src/filters/stationary/include/AavMaxMc.h" c-mode) (def-buffer "AavMax.h" "/home/waka/workspace/hgrm/master/hagoromo/services/soundservice/src/filters/stationary/include/AavMax.h" c-mode) (def-buffer "AVO.h" "/home/waka/workspace/hgrm/master/hagoromo/services/soundservice/src/filters/stationary/include/AVO.h" c-mode) (def-buffer "AECVA.h" "/home/waka/workspace/hgrm/master/hagoromo/services/soundservice/src/filters/stationary/include/AECVA.h" c-mode) (def-buffer "AEC.h" "/home/waka/workspace/hgrm/master/hagoromo/services/soundservice/src/filters/stationary/include/AEC.h" c-mode) (def-buffer "soundservice" "~/workspace/hgrm/master/hagoromo/services/soundservice/" dired-mode) (def-buffer "F2i.cc<stationary>" "/home/waka/workspace/hgrm/master/hagoromo/services/soundservice/src/filters/stationary/F2i/F2i.cc" c++-mode) (def-buffer "src<soundpostcontrolservice>" "~/workspace/hgrm/master/hagoromo/services/soundpostcontrolservice/src/" dired-mode) (def-buffer "tools<filters>" "~/workspace/hgrm/master/hagoromo/services/soundpostcontrolservice/src/pipeline/filters/tools/" dired-mode) (def-buffer "effector.csv" "/home/waka/workspace/hgrm/master/hagoromo/services/soundpostcontrolservice/src/pipeline/filters/tools/effector.csv" csv-mode) (def-buffer "tools<stationary>" "~/workspace/hgrm/master/hagoromo/services/soundservice/src/filters/stationary/tools/" dired-mode) (def-buffer "services" "~/workspace/hgrm/master/hagoromo/services/" dired-mode) (def-buffer "hagoromo" "~/workspace/hgrm/master/hagoromo/" dired-mode) (def-buffer "master" "~/workspace/hgrm/master/" dired-mode) (def-buffer "hgrm" "~/workspace/hgrm/" dired-mode) (def-buffer "workspace" "~/workspace/" dired-mode) (def-buffer "archives" "~/.emacs.d/elpa/archives/" dired-mode) (def-buffer "howm" "~/dotfiles/emacs.d/" dired-mode)) (def-wconf (((min-height . 4) (min-width . 10) (min-height-ignore . 3) (min-width-ignore . 4) (min-height-safe . 1) (min-width-safe . 2) (min-pixel-height . 64) (min-pixel-width . 80) (min-pixel-height-ignore . 48) (min-pixel-width-ignore . 32) (min-pixel-height-safe . 16) (min-pixel-width-safe . 16)) leaf (pixel-width . 1916) (pixel-height . 1060) (total-width . 240) (total-height . 66) (normal-height . 1.0) (normal-width . 1.0) (buffer "*howmM:%menu%*" (selected . t) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars 0 0 t nil) (vscroll . 0) (dedicated) (point . 1) (start . 1)))) (def-params nil) t nil nil) (def-persp "sony" nil (def-wconf (((min-height . 8) (min-width . 20) (min-height-ignore . 6) (min-width-ignore . 8) (min-height-safe . 2) (min-width-safe . 4) (min-pixel-height . 128) (min-pixel-width . 160) (min-pixel-height-ignore . 96) (min-pixel-width-ignore . 64) (min-pixel-height-safe . 32) (min-pixel-width-safe . 32)) hc (pixel-width . 1916) (pixel-height . 1060) (total-width . 240) (total-height . 66) (normal-height . 1.0) (normal-width . 1.0) (combination-limit) (vc (pixel-width . 956) (pixel-height . 1060) (total-width . 120) (total-height . 66) (normal-height . 1.0) (normal-width . 0.4989561586638831) (combination-limit) (leaf (pixel-width . 956) (pixel-height . 528) (total-width . 120) (total-height . 33) (normal-height . 0.4981132075471698) (normal-width . 1.0) (buffer "F2i.diff" (selected) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars 0 0 nil nil) (vscroll . 0) (dedicated) (point . 2837) (start . 2606))) (leaf (last . t) (pixel-width . 956) (pixel-height . 532) (total-width . 120) (total-height . 33) (normal-height . 0.5018867924528302) (normal-width . 1.0) (buffer "F2i.cc<filters>" (selected) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars 0 0 nil nil) (vscroll . 0) (dedicated) (point . 3773) (start . 3270)))) (leaf (last . t) (pixel-width . 960) (pixel-height . 1060) (total-width . 120) (total-height . 66) (normal-height . 1.0) (normal-width . 0.5010438413361169) (buffer "make_effector.sh<filters>" (selected . t) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars 0 0 nil nil) (vscroll . 0) (dedicated) (point . 2475) (start . 1881))))) (def-params nil) nil nil nil) (def-persp "howm" ((def-buffer "2019-10-25-171922.txt" "/home/waka/howm.git/2019/10/2019-10-25-171922.txt" text-mode) (def-buffer "2015-12-24-143339.txt" "/home/waka/howm.git/2015/12/2015-12-24-143339.txt" text-mode) (def-buffer "howm-view.el" "/home/waka/dotfiles/emacs.d/elpa/howm-20171225.652/howm-view.el" emacs-lisp-mode) (def-buffer "howm.el" "/home/waka/dotfiles/emacs.d/elpa/howm-20171225.652/howm.el" emacs-lisp-mode) (def-buffer "howm-mode.el" "/home/waka/dotfiles/emacs.d/elpa/howm-20171225.652/howm-mode.el" emacs-lisp-mode) (def-buffer "howm-common.el" "/home/waka/dotfiles/emacs.d/elpa/howm-20171225.652/howm-common.el" emacs-lisp-mode) (def-buffer "2016-11-01-000000.txt" "/home/waka/howm.git/2016/11/2016-11-01-000000.txt" text-mode) (def-buffer "howm-version.el" "/home/waka/dotfiles/emacs.d/elpa/howm-20171225.652/howm-version.el" emacs-lisp-mode) (def-buffer "action-lock.el" "/home/waka/dotfiles/emacs.d/elpa/howm-20171225.652/action-lock.el" emacs-lisp-mode)) (def-wconf (((min-height . 4) (min-width . 10) (min-height-ignore . 3) (min-width-ignore . 4) (min-height-safe . 1) (min-width-safe . 2) (min-pixel-height . 64) (min-pixel-width . 80) (min-pixel-height-ignore . 48) (min-pixel-width-ignore . 32) (min-pixel-height-safe . 16) (min-pixel-width-safe . 16)) leaf (pixel-width . 1916) (pixel-height . 1060) (total-width . 240) (total-height . 66) (normal-height . 1.0) (normal-width . 1.0) (buffer "init.el" (selected . t) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars 0 0 t nil) (vscroll . 0) (dedicated) (point . 13516) (start . 12518)))) (def-params nil) nil nil nil))